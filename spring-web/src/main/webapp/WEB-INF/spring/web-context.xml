<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 
		<mvc:annotation-driven > 태그는
			spring mvc 관련 어노테이션을 감지/분석해서 적절한 작업을 수행하는 객체를 스프링의 빈으로 등록시킨다.
			
		<mvc:argument-resolvers> 태그는
			사용자정의 HandlerMethodArgumentREsolver를 추가시킨다.
			* LoginUserHandlerMethodArgumentResolve는 요청핸들러 메소드의 매개변수에 @LoginUser 어노테이션이 지정되어 있으면
			  세션에서 로그인된 사용자정보를 조회햐서 매개변수에 전달한다.
	 -->
	<mvc:annotation-driven >
		<mvc:argument-resolvers>
			<bean class="com.sample.web.resolve.LoginUserHandlerMethodArgumentResolve" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	<!-- 
		<mvc:mapping path="/**/*"/>
			* ahems URL에 interceptor가 실행
		<mvc:exclude-mapping path=""/>
			* path 안에 interceptor을 제외할 것들을 적는다.
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/*"/>
			<mvc:exclude-mapping path="/home"/>
			<mvc:exclude-mapping path="/register"/>
			<mvc:exclude-mapping path="/success"/>
			<mvc:exclude-mapping path="/login"/>
			<bean class="com.sample.web.interceptor.LoginCheckHandlerInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 
		<mvc:view-resolvers /> 태그는 
			spring mvc가 지원하는 다양한 뷰-템플릿기술(모델의 데이터를 표현하는 기술)에 대한 설정을 지원하는 태그다.
	 -->
	<mvc:view-resolvers>
		<!-- 
			<mvc:jsp /> 태그는 
				Controller의 요청핸드러 메소드가 반환하는 뷰 이름("home")을 실제 JSP 경로에 맞게 맞추도록
				prefix="/WEB-INF/views/"와 suffix=".jsp"를 지정한다.
				InternalResourceViewResolver 객체의 prefix, suffix 값을 설정한다.
		 -->
		<mvc:jsp prefix="/WEB-INF/views/" suffix=".jsp"/>
	</mvc:view-resolvers>
	
	<!-- 
		<context:component-scan /> 태그는 
			com.sample.web 패키지에서 클래스를 스캔해서 스프링 컨테이너의 빈으로 등록시킨다.
			이 애플리케이션에서 com.sample.web.controller 패키지의 모든 Controller 클래스를 스캔해서 스프링 컨테이너의 빈으로 등록시킨다.
	 -->
	<context:component-scan base-package="com.sample.web" />
	
	<!-- 
		multipart 요청(첨부파일 업로드 요청)을 지원하는 MultipartResolver 객체를 스프링 컨테이너의 빈으로 등록시킨다.
		반드시, id를 "multipartResolver"로 지정해야한다.
	 -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<property name="defaultEncoding" value="UTF-8"/>
	 	<property name="maxUploadSize" value="10485760" />
	 	<property name="maxUploadSizePerFile" value="10485760" />
	 </bean>

</beans>
