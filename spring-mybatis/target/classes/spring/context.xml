<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 
		db.properties 파일 정보를 관히하는 객체를 스프링 컨테이너의 빈으로 등록하기
	 -->
	<context:property-placeholder location="classpath:spring/db.properties"/>
	
	<!-- 
		Connection객체를 관리하는 Connection Pool 객체를 스프링컨테이너의 빈으로 등록하기
	 -->
	 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	 	<property name="driverClassName" value="${db.driver-class-name}"></property>
	 	<property name="url" 			value="${db.url}"></property>
	 	<property name="username" 		value="${db.username}"></property>
	 	<property name="password" 		value="${db.password}"></property>
	 </bean>
	 
	 <!-- 
		SqlSessionFactory객체를 스프링 컨테이너의 빈으로 등록하기
		* SqlSessionFactory는 mybatis의 핵심객체다
		* SqlSessionFactory는 SqlSession 객체를 제공하는 객체다.
		* SqlSession객체는 Mapper 인터페이스를 구현한 Mapper 인스턴스를 생성하는 객체다.
		* 아래의 MapperScannerConfigurer은 SqlSession객체를 이용해서 Mapper 인스턴스를 생성한다.
		
		* SqlSessionFactoryBean은 mybatis 환경설정파일, 매퍼파일, Connection Pool을 주입받아서
		  SqlSessionFactory객체를 생성하고, 생성된 SqlSessionFactory 객체를 스프링 컨테이너의 빈으로 등록시킨다.
		
		* 클래스이름이 -FactoryBean으로 끝나는 경우(class="~~FactoryBean"), 
		  <bean />태그와 이와 같이 설정하면 <bean id="sqlSessionFActory" class="~FactoryBean"></bean>
		  - FactoryBean 객체가 스프링 컨테이너의 빈으로 등록되는 것이 아니라
		  - FactoryBean의 getObject() 메소드가 반환하는 객체가 스프링 컨테이너의 빈으로 등록된다.
	  -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" 	ref="dataSource"></property>
	 	<property name="configLocation"	value="mybatis/mybatis-config.xml"></property>
	 	<property name="mapperLocations" value="classpath:mybatis/mappers/*.xml"></property>
	 	<property name="typeAliasesPackage" value="com.sample.vo"></property>
	 </bean>
	 
	 <!-- 
	 	<mybatis-spring:scan />
	 		* MapperScannerConfigurer 객체를 스프링 컨테이너의 빈으로 등록시킨다.
	 		* MapperScannerConfigurer 객체는 base-package 속성으로 지정된 패키지에서 
	 		  Mapper 인터페이스를 전부 스캔해서 Mapper인터페이스를 구현한 Mapper 인스턴스(객체)를 생성하고,
	 		  생성된 Mapper 인스턴스를 스프링 컨테이너의 빈으로 등록시킨다.
	 	
	  -->
	 <mybatis-spring:scan base-package="com.sample.mapper" factory-ref="sqlSessionFactory"/>
	 
	 <context:annotation-config />
	 <context:component-scan base-package="com.sample.service" />
	 
</beans>
